AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: OMS Percentile Lambda Function for UpNest Hackathon

Parameters:
  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID
    Default: ""
  CognitoClientId:
    Type: String
    Description: Cognito Client ID
    Default: ""
  CognitoRegion:
    Type: String
    Description: AWS Region for Cognito
    Default: "us-east-1"

Resources:
  PercentileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: upnest-percentile
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      CodeUri: .
      Timeout: 10
      MemorySize: 512
      Policies: AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          LOG_LEVEL: INFO
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          COGNITO_CLIENT_ID: !Ref CognitoClientId
          COGNITO_REGION: !Ref CognitoRegion
      Events:
        PercentileApi:
          Type: Api
          Properties:
            Path: /percentile
            Method: post
            RestApiId: !Ref PercentileApi
  
  PercentileApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      # Enable CORS preflight
      DefinitionBody:
        swagger: '2.0'
        info:
          title: UpNest Percentile API
          version: '1.0'
        paths:
          /percentile:
            post:
              responses:
                '200':
                  description: Success
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
            options:
              responses:
                '200':
                  description: CORS preflight
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string  
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

# Outputs are optional but useful for retrieving ARNs and function URLs
Outputs:
  PercentileFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt PercentileFunction.Arn
  
  PercentileApiUrl:
    Description: "API Gateway endpoint URL for Percentile function"
    Value: !Sub "https://${PercentileApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/percentile"
